import { Task } from './task.js';
import { HvigorNode } from '../core/hvigor-node.js';
import { TaskDetails } from '../../internal/task/interface/task-details-interface.js';
/**
 * hvigor task的核心类，包含了基础的成员变量和默认的方法实现
 *
 * @since 2022/4/22
 */
export declare class CoreTaskImpl extends Task {
    protected node: HvigorNode;
    protected name: string;
    protected path: string;
    protected dependsTask: string[];
    protected fn: Function;
    protected executed: boolean;
    protected isEnabled: boolean;
    protected group: string;
    protected description: string | undefined;
    protected constructor(node: HvigorNode, taskDetails: TaskDetails);
    execute(): void;
    getExecuted(): boolean;
    setDependsOn(...taskNames: string[]): Task;
    getDependsOn(): string[];
    addDependsOn(taskName: string): Task;
    dependsOn(task: string | Task, node?: string | HvigorNode): Task;
    /**
     * 添加模块间任务依赖时，根据对应的模块名找对应依赖的模块,当前顺序为先模块后工程
     * 由于存在模块名和工程名一样的场景,因此增加一个默认":"时代表project
     *
     * @param {string} nodeName
     * @return {Module | Project}
     * @private
     */
    private findTargetNode;
    private isProject;
    getAction(): Function;
    getNode(): HvigorNode;
    getName(): string;
    getPath(): string;
    getEnabled(): boolean;
    setEnabled(enabled: boolean): Task;
    setDescription(description: string): Task;
    getDescription(): string | undefined;
    getGroup(): string;
    setGroup(group: string): Task;
    /**
     * 根据hvigorNode以及task name来获取task的path
     *
     * @param {DefaultNodeImpl} hvigorNode
     * @param {string} taskName
     * @returns {string}
     */
    private static createTaskPath;
}
